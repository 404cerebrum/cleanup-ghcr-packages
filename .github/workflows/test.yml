name: Test Action

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Create a test package with a specific tag to test deletion
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create test image
        run: |
          # Create a simple test Dockerfile
          echo 'FROM alpine:latest
          RUN echo "This is a test container" > /test.txt
          CMD ["cat", "/test.txt"]' > Dockerfile
          
          # Set test package name (using "test-package" to be unique)
          TEST_PACKAGE="test-package-$(date +%s)"
          TEST_TAG="test-$(date +%s)"
          
          # Build and push a test image
          docker buildx build --push \
            --tag ghcr.io/${{ github.repository_owner }}/$TEST_PACKAGE:$TEST_TAG \
            .
            
          echo "TEST_PACKAGE=$TEST_PACKAGE" >> $GITHUB_ENV
          echo "TEST_TAG=$TEST_TAG" >> $GITHUB_ENV
          
          # Wait for package to be available in the registry
          sleep 15
      
      # Verify test image exists
      - name: Verify test image exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # List packages to verify our test package exists
          gh api -X GET /users/${{ github.actor }}/packages/container/${{ env.TEST_PACKAGE }}/versions \
            --paginate -H "Accept: application/vnd.github+json" > all_versions.json
            
          # Check if our test tag exists
          if jq -e '.[] | select(.metadata.container.tags[] | contains("${{ env.TEST_TAG }}"))' all_versions.json > /dev/null; then
            echo "✅ Test package ${{ env.TEST_PACKAGE }}:${{ env.TEST_TAG }} created successfully"
          else
            echo "❌ Test package ${{ env.TEST_PACKAGE }}:${{ env.TEST_TAG }} not found"
            cat all_versions.json
            exit 1
          fi

      # Test action with dry run on non-existent package (testing error handling)
      - name: Test action with dry run on non-existent package
        uses: ./
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          package-name: 'non-existent-package-123'
          days: 30
          dry-run: 'true'
      
      # Test with our created test package (dry run)
      - name: Test action with test package (dry run)
        uses: ./
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          package-name: ${{ env.TEST_PACKAGE }}
          days: 30
          dry-run: 'true'
      
      # Get test package ID for verification
      - name: Get test package ID
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get specific test package details
          gh api -X GET /users/${{ github.actor }}/packages/container/${{ env.TEST_PACKAGE }}/versions \
            --paginate -H "Accept: application/vnd.github+json" > versions.json
            
          # Extract test package ID
          TEST_PACKAGE_ID=$(jq -r '.[] | select(.metadata.container.tags[] | contains("${{ env.TEST_TAG }}")) | .id' versions.json)
          echo "TEST_PACKAGE_ID=$TEST_PACKAGE_ID" >> $GITHUB_ENV
          
          if [ -z "$TEST_PACKAGE_ID" ]; then
            echo "❌ Could not find test package ID"
            exit 1
          else
            echo "✅ Found test package ID: $TEST_PACKAGE_ID"
          fi
      
      # Now run the action to delete test package with a small retention period
      - name: Delete test package with action
        uses: ./
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          package-name: ${{ env.TEST_PACKAGE }}
          days: 0  # 0 days retention to make sure it gets deleted
          dry-run: 'false'
      
      # Verify deletion
      - name: Verify test package was deleted
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # List packages again to check if our test package was deleted
          gh api -X GET /users/${{ github.actor }}/packages/container/${{ env.TEST_PACKAGE }}/versions \
            -H "Accept: application/vnd.github+json" > final_versions.json 2>/dev/null || echo "Package not found (expected)"
            
          # If the file exists and contains data, check for our package ID
          if [ -s final_versions.json ] && jq -e '.[] | select(.id == '"${{ env.TEST_PACKAGE_ID }}"')' final_versions.json > /dev/null 2>&1; then
            echo "❌ Test package ${{ env.TEST_PACKAGE_ID }} still exists"
            cat final_versions.json
            exit 1
          else
            echo "✅ Test package ${{ env.TEST_PACKAGE_ID }} was successfully deleted"
          fi
          
      # Test with organization parameter (dry run)
      - name: Test with organization parameter
        uses: ./
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          org: ${{ github.repository_owner }}
          package-name: 'test-package'
          days: 14
          dry-run: 'true'
          
      # Final success message
      - name: Test summary
        run: |
          echo "✅ All tests passed successfully"
          echo "The following tests were performed:"
          echo "1. Created test container in GHCR"
          echo "2. Verified test container exists"
          echo "3. Tested action on non-existent package (error handling)"
          echo "4. Tested action on test package (dry run)"
          echo "5. Deleted test package using the action"
          echo "6. Verified deletion was successful"
          echo "7. Tested with organization parameter"

name: Test Action

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Create a test package with a specific tag for testing
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create test container in current package
        run: |
          # Create a simple test Dockerfile
          echo 'FROM alpine:latest
          RUN echo "This is a test container" > /test.txt
          CMD ["cat", "/test.txt"]' > Dockerfile
          
          # Use current repository name as the package name
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
          TEST_TAG="test-$(date +%s)"
          
          echo "Creating test container: ghcr.io/${{ github.repository_owner }}/$REPO_NAME:$TEST_TAG"
          
          # Build and push a test image
          docker buildx build --push \
            --tag ghcr.io/${{ github.repository_owner }}/$REPO_NAME:$TEST_TAG \
            .
            
          echo "PACKAGE_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "TEST_TAG=$TEST_TAG" >> $GITHUB_ENV
          
          # Wait for package to be available in the registry
          echo "Waiting for package to be available in registry..."
          sleep 30
      
      # Test basic dry run
      - name: Test action with dry-run
        uses: ./
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          username: ${{ github.repository_owner }}
          package-name: ${{ env.PACKAGE_NAME }}
          days: 30
          dry-run: 'true'
      
      # Create a very old-dated package version (for testing deletion)
      - name: Create older-dated package version for deletion test
        run: |
          # Create a different Dockerfile
          echo 'FROM alpine:latest
          RUN echo "This is an older test container" > /test-old.txt
          CMD ["cat", "/test-old.txt"]' > Dockerfile.old
          
          # Build and push with deletion test tag
          DELETION_TAG="delete-me-$(date +%s)"
          
          docker buildx build --push \
            --file Dockerfile.old \
            --tag ghcr.io/${{ github.repository_owner }}/${{ env.PACKAGE_NAME }}:$DELETION_TAG \
            .
            
          echo "DELETION_TAG=$DELETION_TAG" >> $GITHUB_ENV
          
          # Wait for package to be available
          sleep 15
          
          echo "Created package for deletion test: $DELETION_TAG"
      
      # Delete the test tag with a 0-day retention
      - name: Test deletion with 0-day retention
        uses: ./
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          username: ${{ github.repository_owner }}
          package-name: ${{ env.PACKAGE_NAME }}
          days: 0  # 0-day retention to delete everything
          dry-run: 'false'
      
      # Verify the action ran successfully
      - name: Test with organization parameter
        if: github.repository_owner != github.actor
        uses: ./
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          org: ${{ github.repository_owner }}
          package-name: ${{ env.PACKAGE_NAME }}
          days: 30
          dry-run: 'true'
          
      # Final success message
      - name: Test summary
        run: |
          echo "âœ… All tests completed successfully"
          echo "The following tests were performed:"
          echo "1. Created test container in the current package repository"
          echo "2. Tested action with dry-run"
          echo "3. Created a package version for deletion testing"
          echo "4. Tested actual deletion with 0-day retention"
          echo "5. Tested with organization parameter (if applicable)"
